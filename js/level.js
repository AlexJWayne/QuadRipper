// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.Level = (function() {

    Level.name = 'Level';

    function Level() {
      this.spawnEnemy = __bind(this.spawnEnemy, this);
      this.winnable = false;
      this.timeouts = [];
    }

    Level.prototype.start = function() {};

    Level.prototype.spawnEnemy = function(pos, vel) {
      var enemy;
      enemy = new Enemy();
      if (pos) {
        enemy.position = pos.clone();
      } else {
        enemy.position.x += (Math.random() * 2 - 1) * 30;
        enemy.position.y += (Math.random() * 2 - 1) * 30;
      }
      if (vel) {
        enemy.velocity = vel.clone();
      }
      scene.stage.enemies.push(enemy);
      scene.stage.mesh.add(enemy);
      return enemy;
    };

    Level.prototype.completed = function() {
      return this.winnable && scene.stage.enemies.length === 0;
    };

    Level.prototype.kill = function() {
      var timeout, _i, _len, _ref, _results;
      _ref = this.timeouts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        timeout = _ref[_i];
        _results.push(clearTimeout(timeout));
      }
      return _results;
    };

    Level.prototype.after = function(seconds, fn) {
      var _this = this;
      return this.timeouts.push(setTimeout(function() {
        return fn.call(_this);
      }, seconds * 1000));
    };

    return Level;

  })();

  window.Level1 = (function(_super) {

    __extends(Level1, _super);

    Level1.name = 'Level1';

    function Level1() {
      return Level1.__super__.constructor.apply(this, arguments);
    }

    Level1.prototype.start = function() {
      var i, _i, _j, _k, _l,
        _this = this;
      for (i = _i = 3; _i <= 15; i = _i += 3) {
        this.after(i, this.spawnEnemy);
      }
      for (i = _j = 16; _j <= 40; i = _j += 2) {
        this.after(i, this.spawnEnemy);
      }
      for (i = _k = 41; _k <= 50; i = _k += 1) {
        this.after(i, this.spawnEnemy);
      }
      for (i = _l = 51; _l <= 60; i = _l += 0.35) {
        this.after(i, this.spawnEnemy);
      }
      return this.after(60, function() {
        return _this.winnable = true;
      });
    };

    return Level1;

  })(Level);

  window.Level2 = (function(_super) {

    __extends(Level2, _super);

    Level2.name = 'Level2';

    function Level2() {
      return Level2.__super__.constructor.apply(this, arguments);
    }

    Level2.prototype.train = function(rate, time, speed) {
      var forward, horizontal, i, pos, vel, y, _i, _ref, _ref1, _ref2, _results,
        _this = this;
      if (speed == null) {
        speed = 35;
      }
      forward = Math.floor(Math.random() * 2) === 0;
      horizontal = Math.floor(Math.random() * 2) === 0;
      y = (Math.random() * 2 - 1) * 75;
      pos = new THREE.Vector3(-75, y, 0);
      vel = new THREE.Vector3(speed, 0, 0);
      if (!horizontal) {
        _ref = [pos.y, pos.x], pos.x = _ref[0], pos.y = _ref[1];
        _ref1 = [vel.y, vel.x], vel.x = _ref1[0], vel.y = _ref1[1];
      }
      if (!forward) {
        pos.multiplyScalar(-1);
        vel.multiplyScalar(-1);
      }
      _results = [];
      for (i = _i = 0, _ref2 = 1 / rate; 0 <= time ? _i <= time : _i >= time; i = _i += _ref2) {
        _results.push(this.after(i, function() {
          return _this.spawnEnemy(pos, vel);
        }));
      }
      return _results;
    };

    Level2.prototype.start = function() {
      var _this = this;
      this.after(1, function() {
        return _this.train(3, 5, 20);
      });
      this.after(6, function() {
        return _this.train(3, 5, 20);
      });
      this.after(10, function() {
        return _this.train(3, 4, 20);
      });
      this.after(13, function() {
        return _this.train(3, 3, 30);
      });
      this.after(16, function() {
        return _this.train(3, 3, 35);
      });
      this.after(19, function() {
        return _this.train(3, 3, 40);
      });
      this.after(22, function() {
        return _this.train(3, 3, 50);
      });
      this.after(25, function() {
        return _this.train(4, 2);
      });
      this.after(28, function() {
        return _this.train(4, 2);
      });
      this.after(31, function() {
        return _this.train(4, 2);
      });
      this.after(33, function() {
        return _this.train(12, 1, 25);
      });
      this.after(35, function() {
        return _this.train(12, 1, 25);
      });
      this.after(37, function() {
        return _this.train(12, 1, 25);
      });
      return this.after(38, function() {
        return _this.winnable = true;
      });
    };

    return Level2;

  })(Level);

}).call(this);
