// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Gun = (function(_super) {

    __extends(Gun, _super);

    Gun.prototype.size = 20;

    Gun.prototype.bounds = 100;

    Gun.prototype.buffer = 6;

    Gun.prototype.fireRate = 20;

    Gun.create = function() {
      return {
        top: new Gun('top'),
        right: new Gun('right'),
        bottom: new Gun('bottom'),
        left: new Gun('left')
      };
    };

    function Gun(type) {
      this.type = type;
      Gun.__super__.constructor.call(this, new THREE.CubeGeometry(this.size, this.size, this.size), new THREE.MeshPhongMaterial({
        color: 0x0000ff
      }));
      this.horizontal = this.type === 'top' || this.type === 'bottom';
      this.vertical = !this.horizontal;
      if (this.type === 'top') {
        this.position.y = 100 + this.buffer;
      }
      if (this.type === 'right') {
        this.position.x = 100 + this.buffer;
      }
      if (this.type === 'bottom') {
        this.position.y = -100 - this.buffer;
      }
      if (this.type === 'left') {
        this.position.x = -100 - this.buffer;
      }
      if (this.horizontal) {
        this.scale.x = 0.2;
      }
      if (this.vertical) {
        this.scale.y = 0.2;
      }
    }

    Gun.prototype.updatePosition = function(pos) {
      if (this.horizontal) {
        this.position.x = pos.x;
        if (this.position.x > this.bounds) {
          this.position.x = this.bounds;
        }
        if (this.position.x < -this.bounds) {
          this.position.x = -this.bounds;
        }
      }
      if (this.vertical) {
        if (this.vertical) {
          this.position.y = pos.y;
        }
        if (this.position.y > this.bounds) {
          this.position.y = this.bounds;
        }
        if (this.position.y < -this.bounds) {
          return this.position.y = -this.bounds;
        }
      }
    };

    Gun.prototype.setActive = function(active) {
      var _ref,
        _this = this;
      if (this.active === active) {
        return;
      }
      this.active = active;
      if (this.active) {
        this.fire();
        return this.firingInterval = accurateInterval(1 / this.fireRate * 1000, function() {
          return _this.fire();
        });
      } else {
        return (_ref = this.firingInterval) != null ? _ref.cancel() : void 0;
      }
    };

    Gun.prototype.fire = function() {
      var bulletStartPos, direction;
      bulletStartPos = this.position.clone();
      if (this.type === 'right') {
        bulletStartPos.x = 110;
      }
      if (this.type === 'left') {
        bulletStartPos.x = -110;
      }
      if (this.type === 'top') {
        bulletStartPos.y = 110;
      }
      if (this.type === 'bottom') {
        bulletStartPos.y = -110;
      }
      direction = new THREE.Vector3();
      if (this.type === 'left') {
        direction.x = 1;
      }
      if (this.type === 'right') {
        direction.x = -1;
      }
      if (this.type === 'bottom') {
        direction.y = 1;
      }
      if (this.type === 'top') {
        direction.y = -1;
      }
      return scene.stage.bullets.push(new Bullet(bulletStartPos, direction));
    };

    Gun.prototype.update = function() {};

    return Gun;

  })(THREE.Mesh);

}).call(this);
