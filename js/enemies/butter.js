// Generated by CoffeeScript 1.3.3
(function() {
  var Shield,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Enemy.Butter = (function(_super) {

    __extends(Butter, _super);

    Butter.prototype.size = 15;

    Butter.prototype.health = 6;

    Butter.prototype.speed = 15;

    function Butter() {
      var shield, type, _ref;
      Butter.__super__.constructor.call(this, new THREE.CubeGeometry(this.size, this.size, 3), new THREE.MeshPhongMaterial({
        color: 0xff0000
      }));
      this.shields = {
        top: new Shield(0),
        left: new Shield(Math.TAU * 0.25),
        bottom: new Shield(Math.TAU * 0.5),
        right: new Shield(Math.TAU * 0.75)
      };
      _ref = this.shields;
      for (type in _ref) {
        shield = _ref[type];
        this.add(shield);
      }
      this.velocity = new THREE.Vector3();
      this.turn();
    }

    Butter.prototype.turn = function(direction) {
      var shield, type, _ref;
      _ref = this.shields;
      for (type in _ref) {
        shield = _ref[type];
        shield.active = true;
      }
      this.direction = direction || ['top', 'right', 'bottom', 'left'][Math.floor(Math.random() * 4)];
      switch (this.direction) {
        case 'top':
          this.shields.bottom.active = false;
          return this.velocity.set(0, this.speed, 0);
        case 'right':
          this.shields.left.active = false;
          return this.velocity.set(this.speed, 0, 0);
        case 'bottom':
          this.shields.top.active = false;
          return this.velocity.set(0, -this.speed, 0);
        case 'left':
          this.shields.right.active = false;
          return this.velocity.set(-this.speed, 0, 0);
      }
    };

    Butter.prototype.update = function() {
      var shield, type, _ref, _results;
      Butter.__super__.update.apply(this, arguments);
      _ref = this.shields;
      _results = [];
      for (type in _ref) {
        shield = _ref[type];
        _results.push(shield.update());
      }
      return _results;
    };

    Butter.prototype.hit = function(bullet) {
      if (!this.shields[bullet.direction].active) {
        Butter.__super__.hit.apply(this, arguments);
      }
      return this.turn(bullet.direction);
    };

    return Butter;

  })(Enemy);

  Shield = (function(_super) {

    __extends(Shield, _super);

    function Shield(angle) {
      Shield.__super__.constructor.call(this, new THREE.CubeGeometry(Enemy.Butter.prototype.size * .8, 1.5, 0.5), new THREE.MeshPhongMaterial({
        color: 0xff8888
      }));
      this.position.y = Enemy.Butter.prototype.size / 2 + 1.5;
      this.position.rotateZ(angle);
      this.rotation.z = angle;
      this.active = true;
    }

    Shield.prototype.update = function() {
      return this.material.opacity = this.active ? 1 : 0;
    };

    return Shield;

  })(THREE.Mesh);

}).call(this);
