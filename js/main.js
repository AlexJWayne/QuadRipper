// Generated by CoffeeScript 1.3.1
(function() {

  jQuery(function($) {
    var abort, animate, camera, init, render, renderer, scene, stats;
    abort = false;
    stats = scene = renderer = camera = null;
    init = function() {
      init.renderer();
      if (abort) {
        return;
      }
      init.stats();
      init.camera();
      init.resize();
      return init.stage();
    };
    init.renderer = function() {
      if (Detector.webgl) {
        window.scene = scene = new THREE.Scene();
        scene.renderer = renderer = new THREE.WebGLRenderer({
          antialias: true
        });
        renderer.setClearColorHex(0xBBBBBB, 1);
        renderer.setSize(window.innerWidth, window.innerHeight);
        return document.getElementById('container').appendChild(renderer.domElement);
      } else {
        Detector.addGetWebGLMessage();
        return abort = true;
      }
    };
    init.stats = function() {
      stats = new Stats();
      stats.domElement.style.position = 'absolute';
      stats.domElement.style.bottom = '0px';
      return document.body.appendChild(stats.domElement);
    };
    init.camera = function() {
      var ambient, directionalLight;
      scene.camera = camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
      camera.position.set(0, -75, 300);
      camera.lookAt(new THREE.Vector3(0, 0, 0));
      scene.add(camera);
      ambient = new THREE.AmbientLight(0xffffff, 0.25);
      scene.add(ambient);
      directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(-1, 1, 1);
      return scene.add(directionalLight);
    };
    init.resize = function() {
      return THREEx.WindowResize.bind(renderer, camera);
    };
    init.stage = function() {
      return scene.stage = new Stage();
    };
    animate = function() {
      requestAnimationFrame(animate);
      render();
      return stats.update();
    };
    render = function() {
      return renderer.render(scene, camera);
    };
    init();
    if (!abort) {
      return animate();
    }
  });

}).call(this);
